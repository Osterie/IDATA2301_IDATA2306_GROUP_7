package ntnu.no.stud.entities;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

/**
 * Represents a role assigned to a user.
 * Each role links a user to a role name (e.g., "ADMIN", "USER") and is stored in the "user_roles" table.
 */
@Entity
@Table(name = "user_roles")
public class UserRole {

    /**
     * Unique identifier for this user role entry.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private int id;

    /**
     * The user to whom this role is assigned.
     * This is a many-to-one relationship with the {@link User} entity.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonBackReference
    private User user;

    /**
     * The name of the role (e.g., "ADMIN", "USER").
     */
    @Column(name = "role", nullable = false)
    private String role;

    /**
     * Default constructor required by JPA.
     */
    public UserRole() {
    }

    /**
     * Constructs a UserRole with the specified user and role name.
     *
     * @param user the user associated with this role
     * @param role the name of the role
     */
    public UserRole(User user, String role) {
        this.user = user;
        this.role = role;
    }

    
    // Getters and setters

    /**
     * Returns the unique ID of this user role entry.
     *
     * @return the ID of the user role
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the ID of this user role entry.
     *
     * @param id the new ID to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the user associated with this role.
     *
     * @return the {@link User} entity
     */
    public User getUser() {
        return user;
    }

    /**
     * Sets the user for this role.
     *
     * @param user the {@link User} to associate
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Returns the name of the role.
     *
     * @return the role name
     */
    public String getRole() {
        return role;
    }

    /**
     * Sets the name of the role.
     *
     * @param role the role name to assign
     */
    public void setRole(String role) {
        this.role = role;
    }

    /**
     * Checks equality based on the user ID and role name (case-insensitive).
     *
     * @param o the object to compare
     * @return true if the user IDs and role names match, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (!(o instanceof UserRole))
            return false;
        UserRole that = (UserRole) o;
        return role.equalsIgnoreCase(that.role) && user.getId() == that.user.getId();
    }

    /**
     * Computes a hash code based on user ID and role name (case-insensitive).
     *
     * @return hash code for this user role
     */
    @Override
    public int hashCode() {
        return role.toLowerCase().hashCode() + 31 * user.getId();
    }
}
