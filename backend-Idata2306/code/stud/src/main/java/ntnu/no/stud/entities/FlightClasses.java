package ntnu.no.stud.entities;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;

/**
 * Represents a flight class entity, represents how many seats are available in
 * a specific class for a flight.
 * Each flight class is associated with a specific flight and has a certain
 * number of available seats.
 */
@Entity
@Table(name = "flight_classes")
public class FlightClasses {

    /**
     * Unique identifier for the flight class. Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private int id;

    /**
     * The class associated with this flight class.
     */
    @ManyToOne
    @JoinColumn(name = "class_id", nullable = false)
    private ClassEntity flightClass;

    /**
     * The flight associated with this flight class.
     */
    @ManyToOne
    @JoinColumn(name = "flight_id", nullable = false)
    private Flight flight;

    /**
     * The number of available seats in this flight class.
     */
    @Column(name = "available_seats", nullable = false)
    private int availableSeats;

    public FlightClasses() {
    }

    /**
     * Constructs a FlightClasses with the specified flight class, flight, and
     * available seats.
     *
     * @param flightClass    The class associated with this flight class.
     * @param flight         The flight associated with this flight class.
     * @param availableSeats The number of available seats in this flight class.
     */
    public FlightClasses(ClassEntity flightClass, Flight flight, int availableSeats) {
        this.flightClass = flightClass;
        this.flight = flight;
        this.availableSeats = availableSeats;
    }

    /**
     * Returns the unique identifier of the flight class.
     *
     * @return the ID of the flight class
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the flight class.
     *
     * @param id the ID to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the class associated with this flight class.
     *
     * @return the flight class
     */
    public ClassEntity getFlightClass() {
        return flightClass;
    }

    /**
     * Sets the class associated with this flight class.
     *
     * @param flightClass the flight class to set
     */
    public void setFlightClass(ClassEntity flightClass) {
        this.flightClass = flightClass;
    }

    /**
     * Returns the flight associated with this flight class.
     *
     * @return the flight
     */
    public Flight getFlight() {
        return flight;
    }

    /**
     * Sets the flight associated with this flight class.
     *
     * @param flight the flight to set
     */
    public void setFlight(Flight flight) {
        this.flight = flight;
    }

    /**
     * Returns the number of available seats in this flight class.
     *
     * @return the number of available seats
     */
    public int getAvailableSeats() {
        return availableSeats;
    }

    /**
     * Sets the number of available seats in this flight class.
     *
     * @param availableSeats the number of available seats to set
     */
    public void setAvailableSeats(int availableSeats) {
        this.availableSeats = availableSeats;
    }
}
